public:
    int MinimumEffort(vector<vector<int>>& heights) {
        // Code here
        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>>pq;
        int n=heights.size();
        int m=heights[0].size();
        vector<vector<int>> v(n, vector<int>(m, 1e9));
        v[0][0]=0;
        pq.push({0, {0, 0}});
        int dr[]={-1, 0, +1, 0};
        int dc[]={0, -1, 0, +1};    
        while(!pq.empty()){
            auto it = pq.top();
            pq.pop();
            int dis=it.first;
            int r=it.second.first;
            int c=it.second.second;
            if (r == n - 1 && c == m - 1)
                return dis;
            for(int i=0;i<4;i++){
                int nrow=r+dr[i];
                int ncol=c+dc[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m){
                    int new_dis=max(abs(heights[r][c]-heights[nrow][ncol]), dis);
                    if(new_dis < v[nrow][ncol]){
                    v[nrow][ncol]=new_dis;
                    pq.push({new_dis, {nrow, ncol}});
                }
            }
        }
        }
        return 0;
    }
