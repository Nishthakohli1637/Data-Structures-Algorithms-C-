class Solution {
  public:
    int shortestPath(vector<vector<int>> &grid, pair<int, int> source,
                     pair<int, int> destination) {
        // code here
        if (source.first == destination.first &&
            source.second == destination.second)
            return 0;
        queue<pair<int, pair<int, int>>> q;
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> v(n, vector<int>(m, 1e9));
        v[source.first][source.second]=0;
        q.push({0, {source.first, source.second}});
        int dr[]={-1, 0, +1, 0};
        int dc[]={0, +1, 0, -1};
        while(!q.empty()){
            auto it =q.front();
            q.pop();
            int dis=it.first;
            int r=it.second.first;
            int c=it.second.second;
            for(int i=0;i<4;i++){
                int nrow=r+dr[i];
                int ncol=c+dc[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]==1 && dis+1<v[nrow][ncol]){
                    v[nrow][ncol]=dis+1;
                    if(nrow==destination.first && ncol==destination.second){
                        return dis+1;
                        
                    }
                    q.push({dis+1, {nrow, ncol}});
                }
            }
        }
        return -1;
    }
};
