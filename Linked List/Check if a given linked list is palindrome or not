class Solution {
public:
    int get_length(ListNode* head){
        int len=0;
        while(head!=NULL){
            len++;
            head=head->next;
        }
        return len;
    }
    
   //CALCULATE MIDDLE OF LINKED LIST
    ListNode* get_mid(ListNode* head ) {
        ListNode* slow = head;
        ListNode* fast = head -> next;
        
        while(fast != NULL && fast-> next != NULL) {
            fast = fast -> next -> next;
            slow = slow -> next;
        }
        
        return slow;
    }
    
    //REVERSE THE LINKED LIST FROM THE NEXT OF MIDDLE
    ListNode* reverse_list(ListNode* head) {
        ListNode* prev=NULL;
        ListNode* curr=head;
        while(curr!=NULL){
            ListNode* forward=curr->next;
            curr->next=prev;
            prev=curr;
            curr=forward;
        }
        return prev;
    }
    bool isPalindrome(ListNode* head) {
        if(head==NULL || head->next==NULL){
            return true;
        }
        ListNode* ptr1=get_mid(head);
        ListNode* ptr2=head;
        
        //REVERSE THE RIGHT OF LINKED LIST
        ListNode* temp=ptr1->next;
        ptr1->next=reverse_list(temp);
        
        ListNode* last=ptr1->next;
        while(last!=NULL){
            if(last->val!=ptr2->val){
                return false;
            }
            last=last->next;
            ptr2=ptr2->next;
        }
        return true;
    }
};


//METHOD 2: EASY METHOD BUT TAKES EXTRA SPACE
#include<bits/stdc++.h>
class Solution {
    bool check_palin(vector<int> arr){
        int n=arr.size();
        int s=0;
        int e=n-1;
        while(s<e){
            if(arr[s]!=arr[e]){
                return 0;
            }
            s++;
            e--;
        }
        return 1;
    }
public:
    bool isPalindrome(ListNode* head) {
        vector<int> arr;
        ListNode*temp=head;
        while(temp!=NULL){
        
            //PUSH ALL THE ELEMENTS OF LINKED LIST IN AN ARRAY
            arr.push_back(temp->val);
            temp=temp->next;
        }
        return check_palin(arr);
    }
};
