class Solution {
public:
    ListNode* merge_two_list(ListNode* l1, ListNode* l2){
        if(l1==NULL){
            return l2;
        }
        if(l2==NULL){
            return l1;
        }
        ListNode* curr;
        if(l1->val<=l2->val){
            curr=l1;
            l1=l1->next;
        }
        else{
            curr=l2;
            l2=l2->next;
        }
        ListNode* temp=curr;
        while(l1 && l2){
            if(l1->val<l2->val){
                temp->next=l1;
                l1=l1->next;
            }
            else{
                temp->next=l2;
                l2=l2->next;
            }
            temp=temp->next;
        }
        if(l1){
            temp->next=l1;
        }
        if(l2){
            temp->next=l2;
        }
        return curr;
    }
    ListNode* merge_k_list_array(vector<ListNode*>& lists, int s, int e){
        if(s>e){
            return NULL;
        }
        if(s==e){
            return lists[s];
        }
        int mid=(s+e)/2;
        ListNode* l1=merge_k_list_array(lists, s, mid);
        ListNode* l2=merge_k_list_array(lists, mid+1, e);
        return merge_two_list(l1, l2);
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size()==0){
            return NULL;
        }
        return merge_k_list_array(lists, 0, lists.size()-1);
    }
};
