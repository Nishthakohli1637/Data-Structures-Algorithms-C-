//In a linked list of size n, where n is even, the ith node (0-indexed) of the linked list is known as the twin of the (n-1-i)th node, if 0 <= i <= (n / 2) - 1.

For example, if n = 4, then node 0 is the twin of node 3, and node 1 is the twin of node 2. These are the only nodes with twins for n = 4.
The twin sum is defined as the sum of a node and its twin.

Given the head of a linked list with even length, return the maximum twin sum of the linked list.

 


class Solution {
public:
    int pairSum(ListNode* head) {
        if(head==NULL){
            return NULL;
        }
        int len=0;
        ListNode* temp=head;
        stack<int> s;
        while(temp){
            s.push(temp->val);
            temp=temp->next;

            len++;
        }
        ListNode* p=head;
        int max_val=INT_MIN;
        int s_size=s.size();
        int half_size=s.size()/2;
        len=len/2;
        int val=0;
        while(len-- && half_size--){
             val=s.top() + p->val;
            max_val=max(max_val, val);
            s.pop();
            p=p->next;

        }
        return max_val;
    }
};
