RECURSIVE SOLUTION 
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1==NULL){
            return list2;
        }
        if(list2==NULL){
            return list1;
        }
        if(list1->val<=list2->val){
            list1->next=mergeTwoLists(list1->next, list2);
            return list1;
        }
        else{
            list2->next=mergeTwoLists(list2->next, list1);
            return list2;
        }
    }
};


ITERATIVE APPROACH
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1==NULL){
            return list2;
        }
        if(list2==NULL){
            return list1;
        }
        ListNode* curr;
        if(list1->val<=list2->val){
            curr=list1;
            list1=list1->next;
        }
        else{
            curr=list2;
            list2=list2->next;
        }
        ListNode* temp=curr;
        while(list1 && list2){
            if(list1->val<=list2->val){
                temp->next=list1;
                
                list1=list1->next;
            }
            else{
                temp->next=list2;
                list2=list2->next;
            }
            temp=temp->next;
        }
        if(list1){
            temp->next=list1;
        }
        else{
            temp->next=list2;
        }
        return curr;
        
    }
};


:::::::::
Node<int>* sortTwoLists(Node<int>* first, Node<int>* second)
{
    // Write your code here.
    Node<int>* dummy=new Node<int>(-1);
    Node<int>* temp=dummy;
    Node<int>* t1=first;
    Node<int>* t2=second;
    while(t1!=NULL && t2!=NULL){
        if(t1->data < t2->data){
            temp->next=t1;
            temp=t1;
            t1=t1->next;
        }
        else{
            temp->next=t2;
            temp=t2;
            t2=t2->next;
        }
    }
    if(t1){
        temp->next=t1;
    }
    else{
        temp->next=t2;
    }
    return dummy->next;
}
