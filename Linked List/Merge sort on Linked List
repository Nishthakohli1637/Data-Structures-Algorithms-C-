lass Solution {
public:
    ListNode* get_mid(ListNode* head){
        if(head==NULL || head->next==NULL){
            return head;
        }
        ListNode* slow=head;
        ListNode* fast=head;
        while(fast->next!=NULL && fast->next->next!=NULL){
            fast=fast->next->next;
            slow=slow->next;
        }
        return slow;
    }
    ListNode* merge_lists(ListNode* l1, ListNode* l2){
        if(l1==NULL){
            return l2;
        }
        if(l2==NULL){
            return l1;
        }
        ListNode* curr;
        if(l1->val<=l2->val){
            curr=l1;
            l1=l1->next;
        }
        else{
            curr=l2;
            l2=l2->next;
        }
        ListNode* temp=curr;
        while(l1!=NULL && l2!=NULL){
            if(l1->val<=l2->val){
                temp->next=l1;
                l1=l1->next;
            }
            else{
                temp->next=l2;
                l2=l2->next;
            }
            temp=temp->next;
        }
        if(l1){
            temp->next=l1;
        }
        if(l2){
            temp->next=l2;
        }
        return curr;
    }
    ListNode* sortList(ListNode* head) {
        if(head==NULL || head->next==NULL){
            return head;
        }
        ListNode* midl=get_mid(head);
        ListNode* nhead=midl->next;
        midl->next=NULL;
        ListNode* l1=sortList(head);
        ListNode* l2=sortList(nhead);   
        return merge_lists(l1, l2);
    }
};
