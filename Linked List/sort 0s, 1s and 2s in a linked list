class Solution
{
    public:
    //Function to sort a linked list of 0s, 1s and 2s.
    Node* segregate(Node *head) {
        
        int zero_count=0;
        int one_count=0;
        int two_count=0;
        Node *temp=head;
        while(temp!=NULL){
            if(temp->data==0){
                zero_count++;
            }
            else if(temp->data==1){
                one_count++;
            }
            else if(temp->data==2){
                two_count++;
            }
            temp=temp->next;
        }
        temp=head;
        while(temp!=NULL){
            if(zero_count!=0){
                temp->data=0;
                zero_count--;
            }
            else if(one_count!=0){
                temp->data=1;
                one_count--;
            }
            else if(two_count!=0){
                temp->data=2;
                two_count--;
            }
            temp=temp->next;
        }
        return head;
        
    }


APPROACH 2
Node* sortList(Node *head){
    // Write your code here.
    if(head==NULL || head->next==NULL){
        return head;
    }
    Node *zeroh=new Node(-1);
    Node *oneh=new Node(-1);
    Node *twoh=new Node(-1);
    Node *zero=zeroh;
    Node *one=oneh;
    Node *two=twoh;
    Node *temp=head;
    while(temp!=NULL){
        if(temp->data==0){
            zero->next=temp;
            zero=zero->next;
        }
        else if(temp->data==1){
            one->next=temp;
            one=one->next;
        }
        else{
            two->next=temp;
            two=two->next;
        }
        temp=temp->next;
    }
    if(oneh->next){
        zero->next=oneh->next;
    }
    else{
        zero->next=twoh->next;
    }
    one->next=twoh->next;
    two->next=NULL;
    Node *new_head=zeroh->next;
    delete zeroh;
    delete oneh;
    delete twoh;
    return new_head;
}
