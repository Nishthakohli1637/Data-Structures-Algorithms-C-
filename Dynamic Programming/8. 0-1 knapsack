// Kanpsack Recursive code

#include<bits/stdc++.h>
using namespace std;
int knapsack_recursive(int wt[], int val[], int cap, int n){
    if(n==0 || cap==0){                                     //Base condtn: If there in no weight nd value available or the capacity of bag is zero//
        return 0;
    }
    int ans;
    if(wt[n-1]<=cap){
        ans=max((val[n-1]+knapsack_recursive(wt, val, cap-wt[n-1], n-1)), knapsack_recursive(wt, val, cap, n-1));
    }
    else if(wt[n-1]>cap){
        ans=knapsack_recursive(wt, val, cap, n-1);
    }
    return ans;
}


//Knapsack DP-Tabulation

#include<bits/stdc++.h>
using namespace std;
int knapsack(int wt[], int val[], int cap, int n){
    int dp[n+1][cap+1];
    for(int i=0;i<=n;i++){
        for(int j=0;j<=cap;j++){
            if(i==0 || j==0){
                dp[i][j]=0;
            }
        }
    }
    for(int i=1;i<=n;i++){
        for(int j=1;j<=cap;j++){
            if(j>=wt[i-1]){
                dp[i][j]=max(val[i-1]+dp[i-1][j-wt[i-1]], dp[i-1][j]);
            }
            else{
                dp[i][j]=dp[i-1][j];
            }
        }
    }
    return dp[n][cap];
}
int main(){
    int n;
    cin>>n;
    int wt[n];
    int val[n];
    for(int i=0;i<n;i++){
        cin>>wt[i];
    }
    for(int i=0;i<n;i++){
        cin>>val[i];
    }
    int cap;
    cin>>cap;
    cout<<knapsack(wt, val, cap, n);
}
