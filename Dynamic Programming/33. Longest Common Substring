//Longest common substring
//substring - same string continuous
//when discontinuity occurs =0
//when same in continuous manner=+1
//same as Longest common common subsequence, same in continuous manner=+1, else =0;

#include<bits/stdc++.h>
using namespace std;
int lcs(string x, string y, int n, int m){
    int dp[n+1][m+1];
    for(int i=0;i<=n;i++){
        for(int j=0;j<=m;j++){
            if(i==0 || j==0)
            dp[i][j]=0;
        }
    }
    int max=0;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
                if(x[i-1]==y[j-1]){
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else{
                    dp[i][j]=0;
                }
                if(dp[i][j]>max){
                    max=dp[i][j];
                }
            }
        }
    return max;
    
}
int main(){
    int n;
    cin>>n;
    int m;
    cin>>m;
    string x;
    cin>>x;
    string y;
    cin>>y;
    cout<<lcs(x, y, n, m);
}
