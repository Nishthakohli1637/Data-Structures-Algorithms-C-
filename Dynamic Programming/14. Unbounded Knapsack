#include<bits/stdc++.h>
using namespace std;
int unbounded_knapsack(int wt[], int val[], int n, int cap){
    int dp[n+1][cap+1];
    for(int i=0;i<=n;i++){
        for(int j=0;j<=cap;j++){
            if(i==0 || j==0){
                dp[i][j]=0;
            }
        }
    }
    for(int i=1;i<=n;i++){
        for(int j=1;j<=cap;j++){
            if(j>=wt[i-1]){
                dp[i][j]=max((val[i-1]+dp[i][j-wt[i-1]]), dp[i-1][j]);
            }
            else{
                dp[i][j]=dp[i-1][j];
            }
        }
    }
    return dp[n][cap];
}
int main(){
    int n;
    cin>>n;
    int wt[n], val[n];
    for(int i=0;i<n;i++){
        cin>>wt[i];
    }
    for(int i=0;i<n;i++){
        cin>>val[i];
    }
    int cap;
    cin>>cap;
    cout<<unbounded_knapsack(wt, val, n, cap);
}
