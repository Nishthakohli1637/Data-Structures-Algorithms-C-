#include<bits/stdc++.h>
vector<int> findMissingRepeatingNumbers(vector < int > a) {
    int n=a.size();
    int hash[n+1]={0};
    for(int i=0;i<n;i++){
        hash[a[i]]++;
    }
    int repeat=-1, miss=-1;
    for(int i=1;i<=n;i++){
        if(hash[i]==2){
            repeat=i;
        }
        if(hash[i]==0){
            miss=i;
        }
        if(miss!=-1 && repeat!=-1){
            break;
        }
    }
    return {repeat, miss};
}

APPROACH 2
#include<bits/stdc++.h>
vector<int> findMissingRepeatingNumbers(vector < int > a) {
    int n=a.size();
    unordered_map<int, int> mp;
    for(int i=0;i<n;i++){
        mp[a[i]]++;
    }
    int repeat=-1, miss=-1;
    for(int i=1;i<=n;i++){
        if(mp[i]==2){
            repeat=i;
        }
        if(mp[i]==0){
            miss=i;
        }
        if(miss!=-1 && repeat!=-1){
            break;
        }
    }
    return {repeat, miss};
}


APPROACH 2
vector<int> findMissingRepeatingNumbers(vector < int > a) {
    long long n=a.size();
    long long Sn=(n*(n+1))/2;
    long long s2n=(n*(n+1)*(2*n+1))/6;
    long long s1=0, s2=0;
    for(int i=0;i<n;i++){
        s1+=a[i];
        s2+=(long long)a[i]*(long long)a[i];
    }
    long long val1=s1-Sn;  //x-y, x=repeat, y=miss
    long long val2=s2-s2n; //(x^2-y^2)=(x-y)(x+y)
    val2=val2/val1;        //(x+y)=val2/(x-y);
    long long x=(val1+val2)/2;
    long long y=x-val1;
    return {(int)x, (int)y}; 
}
