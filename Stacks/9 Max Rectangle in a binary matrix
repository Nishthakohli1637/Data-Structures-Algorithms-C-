class Solution {
public:
vector<int> nsl(vector<int> arr){
    vector<int> left;
    stack<pair<int, int>> s1;
    for(int i=0;i<arr.size();i++){
        if(s1.size()==0)
            left.push_back(-1);
        
else if(!s1.empty() && s1.top().first<arr[i])
    left.push_back(s1.top().second);

else if(!s1.empty() && s1.top().first>=arr[i]){
    while(!s1.empty() && s1.top().first>=arr[i])
        s1.pop();
        if(s1.empty())
            left.push_back(-1);
        
        else 
            left.push_back(s1.top().second);
        
    
}
s1.push({arr[i], i});
        
    }
    return left;
}
vector<int> nsr(vector<int> arr){
    vector<int> right;
    stack<pair<int, int>> s2;
    for(int i=(arr.size()-1);i>=0;i--){
        if(s2.size()==0)
            right.push_back(arr.size());
        
        else if(!s2.empty() && s2.top().first<arr[i])
            right.push_back(s2.top().second);
        
        else if(!s2.empty() && s2.top().first>=arr[i]){
            while(!s2.empty() && s2.top().first>=arr[i])
                s2.pop();
                if(s2.empty())
                    right.push_back(arr.size());
                
                else
                    right.push_back(s2.top().second);
                
            
        }
        s2.push({arr[i],i});
    }
    reverse(right.begin(), right.end());
    return right;
}
int mah(vector<int> &arr){
    vector<int> right=nsr(arr);
        vector<int> left=nsl(arr);
        int area=INT_MIN;
        for(int i=0;i<arr.size();i++){
            area=max(area,arr[i]*(right[i]-left[i]-1));
        }
        
        return area;
}
    int maximalRectangle(vector<vector<char>>& matrix) {
    int result=0;
    int n=matrix.size();
    int m=matrix[0].size();
    vector<int> ans(m, 0);
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(matrix[i][j]=='0'){
                ans[j]=0;
            }
            else{
                ans[j]+=1;
            }
        }
        result=max(result, mah(ans));
    }
    return result;
    }
};
