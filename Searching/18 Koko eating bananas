class Solution {
public:
    int minEatingSpeed(vector<int>& piles, int h) {
        int maxv=INT_MIN;
        for(int i=0;i<piles.size();i++){
           
            maxv=max(piles[i], maxv);
        }
        if(h==piles.size()){
            return maxv;
        }
        long long int s=1, e=maxv, mid=INT_MAX;
        long long int ans=-1;
        while(s<=e){
             mid=s+(e-s)/2;
            if(canEat(piles, mid, h)){
                ans=mid;
                e=mid-1;
            }
            else{
                s=mid+1;
            }
        }
        return ans;
    }
    bool canEat(vector<int>& piles, int k, int h){
        long long int t_time=0;
        for(int i=0;i<piles.size();i++){
            long long int time=ceil(piles[i]*1.0/k);
            t_time+=time;
            // if(piles[i]%k!=0){
            //     t_time++;
            // }
        }
        return t_time<=h;
    }
};
