#include <iostream>
#include <stack>
using namespace std;

class Queue {
    stack<int> stack1, stack2;

public:
    // Enqueue an item to the queue
    void enqueue(int data) {
        // Push item into the first stack
        stack1.push(data);
    }

    // Dequeue an item from the queue
    int dequeue() {
        // If both stacks are empty, then the queue is empty
        if (stack1.empty() && stack2.empty()) {
            cout << "Queue is empty" << endl;
            return -1;
        }

        // If the second stack is empty, move elements from the first stack
        if (stack2.empty()) {
            while (!stack1.empty()) {
                stack2.push(stack1.top());
                stack1.pop();
            }
        }

        // Pop the element from the second stack
        int topVal = stack2.top();
        stack2.pop();
        return topVal;
    }

    // Get the front item from the queue
    int front() {
        if (stack1.empty() && stack2.empty()) {
            cout << "Queue is empty" << endl;
            return -1;
        }

        if (stack2.empty()) {
            while (!stack1.empty()) {
                stack2.push(stack1.top());
                stack1.pop();
            }
        }

        return stack2.top();
    }

    // Check if the queue is empty
    bool isEmpty() {
        return stack1.empty() && stack2.empty();
    }
};

int main() {
    Queue q;
    q.enqueue(1);
    q.enqueue(2);
    q.enqueue(3);

    cout << "Front element is: " << q.front() << endl;

    cout << "Dequeued: " << q.dequeue() << endl;
    cout << "Dequeued: " << q.dequeue() << endl;

    cout << "Front element is: " << q.front() << endl;

    q.enqueue(4);
    q.enqueue(5);

    while (!q.isEmpty()) {
        cout << "Dequeued: " << q.dequeue() << endl;
    }

    return 0;
}
