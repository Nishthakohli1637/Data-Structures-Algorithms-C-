class Solution {
public:
    TreeNode* find_last_right(TreeNode* root){
        if(root->right==NULL){
            return root;
        }
        return find_last_right(root->right);
    }
    TreeNode* helper(TreeNode* root){
        if(root->right==NULL){
            return root->left;
        }
        if(root->left==NULL){
            return root->right;
        }
        TreeNode* right_child=root->right;
        TreeNode* last_right_child=find_last_right(root->left);
        last_right_child->right=right_child;
        return root->left;
    }
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root==NULL){
            return NULL;
        }
        if(root->val==key){
            return helper(root);
        }
            TreeNode* node=root;
            while(root){
                if(root->val>key){
                    if(root->left!=NULL && root->left->val==key){
                        root->left=helper(root->left);
                        break;
                    }
                    else{
                        root=root->left;
                    }
                }
                else{
                    if(root->right!=NULL && root->right->val==key){
                        root->right=helper(root->right);
                        break;
                    }
                    else{
                        root=root->right;
                    }
                }
            }
            return node;
        
    }
};
