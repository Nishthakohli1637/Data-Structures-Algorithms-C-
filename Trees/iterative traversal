#include<bits/stdc++.h>
using namespace std;
class Node{
    public:
    int data;
    Node* left;
    Node* right;
    Node(int d){
        this->data=d;
        this->left=NULL;
        this->right=NULL;
    }
};
Node* build_tree(Node* root){
    cout<<"enter the data: "<<endl;
    int data;
    cin>>data;
    root=new Node(data);
    if(data==-1){
        return NULL;
    }
    cout<<"Enter the data on left of "<<data<<endl;
    root->left=build_tree(root->left);
    cout<<"Enter the data on right of "<<data<<endl;
    root->right=build_tree(root->right);
    return root;
}
void level_order_traversal(Node* root){
    queue<Node*> q;
    q.push(root);
    while(!q.empty()){
        Node* temp=q.front();
        cout<<temp->data<<" ";
        q.pop();
        if(temp->left){
            q.push(temp->left);
        }
        if(temp->right){
            q.push(temp->right);
        }
    }
}
void inorder(Node* root){
    if(root==NULL){
        return;
    }
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}
void preorder(Node* root){
    if(root==NULL){
        return;
    }
    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right);
}
void postorder(Node* root){
    if(root==NULL){
        return;
    }
    postorder(root->left);
    postorder(root->right);
    cout<<root->data<<" ";
}
vector<int> iterative_preorder(Node* root){
    vector<int> pre_order;
    stack<Node*> s;
    s.push(root);
    while(!s.empty()){
        root=s.top();
        s.pop();
        pre_order.push_back(root->data);
        if(root->right){
            s.push(root->right);
        }
        if(root->left){
            s.push(root->left);
        }
    }
    return pre_order;
}
vector<int> iterative_inorder(Node* root){
    stack<Node*> s;
    Node* temp=root;
    vector<int> in_order;
    while(true){
        if(temp!=NULL){
            s.push(temp);
            temp=temp->left;
        }
        else{
            if(s.empty()==true){
                break;
        }
            temp=s.top();
            s.pop();
            in_order.push_back(temp->data);
            temp=temp->right;
        }
    }
    return in_order;
}
int main(){
    Node* root=NULL;
    root=build_tree(root);
    cout<<"The level order traversal: ";
    level_order_traversal(root);
    cout<<endl;
    cout<<"The inorder traversal: ";
    inorder(root);
    cout<<endl;
    cout<<"The preorder traversal: ";
    preorder(root);
    cout<<endl;
    cout<<"The postorder traversal: ";
    postorder(root);
    cout<<endl;
    vector<int> v=iterative_preorder(root);
    cout<<"The iterative preorder traversal: ";
    for(int i=0;i<v.size();i++){
        cout<<v[i]<<" ";
    }
    cout<<endl;
    vector<int> a=iterative_inorder(root);
    cout<<"The iterative inorder traversal: ";
    for(int i=0;i<a.size();i++){
        cout<<a[i]<<" ";
    }
}
