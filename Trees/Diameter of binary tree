class Solution {
public:
    int height(TreeNode* root) {
        if(root==NULL){
            return NULL;
        }
        int h1=height(root->left);
        int h2=height(root->right);
        int ans=max(h1, h2)+1;
        return ans;
    }
    int diameterOfBinaryTree(TreeNode* root) {
        if(root==NULL){
            return NULL;
        }
        int d1=diameterOfBinaryTree(root->left);
        int d2=diameterOfBinaryTree(root->right);
        int d3=height(root->left)+height(root->right);
        int ans=max(d1, max(d2, d3));
        return ans;
    }
};

In the above solution the complexity is O(n^2) because we are calculating diameter and height in each iteration so another ptimal solution is:

class Solution {
public:
    int height(TreeNode* root, int &diameter) {
        if(!root){
            return 0;
        }
        int h1=height(root->left, diameter);
        int h2=height(root->right, diameter);
        diameter=max(diameter, h1+h2);
        return 1 + max(h1,h2);
    }
    int diameterOfBinaryTree(TreeNode* root) {
        int diameter=0;
        height(root, diameter);
        return diameter;
    }
};
