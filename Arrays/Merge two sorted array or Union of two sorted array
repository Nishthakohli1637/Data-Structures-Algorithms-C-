#include<bits/stdc++.h>
vector < int > sortedArray(vector < int > a, vector < int > b) {
    set <int> st;
    int n1=a.size();
    int n2=b.size();
    for(int i=0;i<n1;i++){
        st.insert(a[i]);
    }
    for(int i=0;i<n2;i++){
        st.insert(b[i]);
    }
    vector<int> temp;
    for(auto i:st){
        temp.push_back(i);
    }
    return temp;
}

APPROACH 2
#include<bits/stdc++.h>
vector < int > sortedArray(vector < int > a, vector < int > b) {
    int n1=a.size();
    int n2=b.size();
    vector <int> unionArr;
    int i=0, j=0;
    while(i<n1 && j<n2){
        if(a[i]<=b[j]){
            if(unionArr.size()== 0 || unionArr.back()!=a[i]){
                unionArr.push_back(a[i]);
            }
            i++;
        }
        else if(a[i]>=b[j]){
            if(unionArr.size()== 0 || unionArr.back()!=b[j]){
                unionArr.push_back(b[j]);
            }
            j++;
        }
    }
    while(i<n1){
        
            if(unionArr.size()== 0 || unionArr.back()!=a[i]){
                unionArr.push_back(a[i]);
            }
            i++;
        
    }
    while(j<n2){
        
            if (unionArr.size() == 0 || unionArr.back() != b[j]) {
                unionArr.push_back(b[j]);
            }
            j++;
        
    }
    return unionArr;
}
