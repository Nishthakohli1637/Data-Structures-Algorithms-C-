int longestSuccessiveElements(vector<int>&nums) {
    if(nums.size()==0){
        return 0;
    }
    int cnt=0;
    sort(nums.begin(), nums.end());
    int longest=1, last_small=INT_MIN;
    for(int i=0;i<nums.size();i++){
        if(nums[i]-1==last_small){
            cnt=cnt+1;
            last_small=nums[i];
        }
        else if(nums[i]!=last_small){
            cnt=1;
            last_small=nums[i];
        }
        longest=max(longest, cnt);
    }
    return longest;
}


APPROACH 2
int longestSuccessiveElements(vector<int> &nums) {
    int n=nums.size();
    if(n==0){
        return 0;
    }
    int longest=1;
    unordered_set<int> st;
    for(int i=0;i<n;i++){
        st.insert(nums[i]);
    }
    for(auto it: st){
        if(st.find(it-1)==st.end()){
            int cnt=1;
            int x=it;
            while(st.find(x+1)!=st.end()){
                x=x+1;
                cnt=cnt+1;
            }
                longest=max(longest, cnt);
        }
    }
    return  longest;
}
