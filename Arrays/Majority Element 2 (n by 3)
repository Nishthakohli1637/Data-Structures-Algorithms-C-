#include<bits/stdc++.h>
vector<int> majorityElement(vector<int> v) {
	vector<int> ans;
	unordered_map<int, int> mp;
	int n=v.size();
	int minv=(int)(n/3)+1;
	for(int i=0;i<n;i++){
		mp[v[i]]++;
		if(mp[v[i]]==minv){
			ans.push_back(v[i]);
		}
		if(ans.size()==2){
			break;
		}
	}
	sort(ans.begin(), ans.end());
	return ans;
}



APPROACH 2
#include<bits/stdc++.h>
vector<int> majorityElement(vector<int> v) {
	vector<int> ans;
	int n=v.size();
	int cnt1=0, cnt2=0;
	int ele1=INT_MIN, ele2=INT_MIN;
	for(int i=0;i<n;i++){
		if(cnt1==0 && ele2!=v[i]){
			cnt1++;
			ele1=v[i];
		}
		else if(cnt2==0 && ele1!=v[i]){
			cnt2++;
			ele2=v[i];
		}
		else if(ele1==v[i]){
			cnt1++;
		}
		else if(ele2==v[i]){
			cnt2++;
		}
		else{
			cnt1--;
			cnt2--;
		}
	}
	 cnt1=0, cnt2=0;
	for(int i=0;i<n;i++){
		if(ele1==v[i]){
			cnt1++;
		}
		else if(ele2==v[i]){
			cnt2++;
		}
	}
	int minv=(int)(n/3)+1;
	if(cnt1>=minv){
		ans.push_back(ele1);
	}
	if(cnt2>=minv){
		ans.push_back(ele2);
	}
	sort(ans.begin(), ans.end());
	return ans;
}
